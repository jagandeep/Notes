Chapter 7 : Asynchronous Programming

Synchronous programming : Caller calls and wait for the call to complete
Asynchronous programming: Caller calls and doesn't block and continues execution
and it notified later through callback or API to get the result.

Blocking : means waiting for operation to finish.
Blocking can be CPU or I/O
CPU means waiting for compuation to finish
I/O means waiting for reading from the database, file system, network or user inpput are all example of i/o.
Message Queue
- A way to archive asynchronous/non blocking processing in application designed for synchnronous programming 
- decouples producer and consumer which allowes them to scale indepenently.
- coupled only on the address of queue and message format.

Message Broker
 message queue can be implmented in many ways 
 - a simple thread running in same application.
 - shared folder were application read and write to 
 - compnenet implemented on SQL database
 - an application accepting, routing, persisting and delivering message( few others as well permission control, failure recovery) aka Message Broker or MOM or EMS.

 They are optimised for 
 - high concrrency 
 - high throuput 
 - fast message enque

Message Consumer
 - recieve and process message 
 - should not know anything about producer
 
 Two typesw of consumer:
   cron like : 
      - connect to priodically to queue and consume fixed or all message for consumption.
      - refered as pull model
      - use when message are added to queue rarely or network connectivity is unreliable.
      Eg mobile ap pulling message from the queue as connection may be lost any point   
  demon like:
     - run in infinite loop and has constant connection to queue. 
     - blocks on socket read operation 
     - push model 
     
 Different Subscription Model:
   - read from queue 
   - direct worker queue( point to Point)
   - pub / sub 
   - custom routing rules
   
 Direct work Queue:
  - one queue and multiple producer or consumer
  - only one consumer consumes the message
  - sutable for distribution of time consuming task
  - best when consumer are stateless and uniform
     - replacing failure node is easy as swapping
     - scalling by adding worker node which increase overall throughput.  
  eg: sending out email, processing video, resizing image or uploading content to third party web service. 
  
 Publisher/Subscriber Method:
  - message published to topic and copy of message delivered to all consumer subscribed to topic.
  - consumer have to connect to broker and declare which topic they are interested in.
  - each message send to private queue of each consumer
 eg: publishing message for every purchase to  topic and consumer could be shipping provide and loyality program. 
 In future could be purachase confirmation email with pdf.
 - competing consumer in which consumber subscribing to same queue or message are distributed among consumers.
 
Custom Routing Rules:
 - Rabbit MQ allow based on test pattern matching 
 - ActiveMQ use camel extension to create advance routing rules.
 eg: logging and alerting based on pattern matching. Logging Queue which accepts all logs and 
 Alert queue which gets all critical error and all sev 1 support ticket. Then File logger reads
 all logs from Logging queue and save to file. Where as Alert Generator generates operator notification.
 
 Messaging Protocol :
  - used to transport message from producer to consumer
  AMQP - Advance Message Queuing Protocal 
     - standard and wide support in product.
     - various feacture like reliable message delivery, delivery guruntee, transaction  and other advance feature
     - all programig lanaguage have a cclient
     - both activemq and rabbitmq support it.
     - use it were ever possible
 STOMP - streaming text Oriented Messaging Protocol
    - minimalist protocol
    - stateless and test based
    - not much performance head
    - advance feature need to be implemented
 JMS : java messaging sevice
    - java based langauges 
    - if need to integrate different system use others
    
 How to make a decision which protocol to use:(transfering message not a concern)
   - feature set 
   - availability of tools and libarary for your language. 
 
Message Infrastructure:
  -  seperate worker into different set of server, so there scalability is not blocked by scalability of other component
  - there is limit on the throughput of a queue because of the message to be delivered to all connected subscriber. 
  Rabbitmq and AcitveMq should work for throughput of tens thousand messge per second outof box
  - For hundered of thousand message per second, we will need to add custom sharding mechanism into the application 
  to distribute message to mutiple queue. Which will allow to scale by adding multiple more message broker.
  
To decide on broker and concern with broker scalability :
  Use below mmetrics
     - Number of message published per second
     - Average message size
     - Number of message consumed per second
     - Number of concurrent publisher and consumers
     - if message persist is needed( broker crash message loss)
     - if message acknoledgement is needed( no message loss during consumer crash)

Benefit of Message Queues:  
   Enable Asynchronous Processing: 
          - interacting with remote server
          - low value processing in critical path( low value send to queue)
          - Resource intensive work
          - independent processing for high and low priority jobs
   Easier Scalability :
       - by adding more producer and consumer
       - no configuration required only connect to message broker
   Handling message spikes:
       - by buffering message in queue and finally producer catch up
       - back pressure 
             - buffering in queue 
             - buffereing in producer
             - buffering in consumer( run out of memory)
             - droping message 
  Isolating Failure
       - failure of producer or consumer doesnt impact other.
       - removing functionality from critical path ( make fault tolerent)
       - multiple worker and producer make system fault tolerent ( as one fail only reduces throughput not availability)
       - self healing by adding replacement worker and heal by catching up with the queue.
       - simplify maintainence by independently stating and stoping consumer
  Decoupled:
     - coupled only to location and message format
     - messge format can be in json or xml.
